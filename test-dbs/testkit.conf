##############################################################################
# Configurations for external test databases
##############################################################################

# Use only the following DBs (or use all if not set)
#testDBs = sqlserver


# For docker-machine use:
#   DOCKER_IP=$(docker-machine ip default)
#   export DOCKER_IP

db2.host = "localhost"
db2.host = ${?DOCKER_IP}
db2NoTableSpace.host = "localhost"
db2NoTableSpace.host = ${?DOCKER_IP}
oracle11g.host = "localhost"
oracle11g.host = ${?DOCKER_IP}
oracle11gNoTableSpace.host = "localhost"
oracle11gNoTableSpace.host = ${?DOCKER_IP}
# ATTENTION: I cannot factor out the host in a common variable, because this file is included in a bigger config
# file. This leads to a prefix put before all the names. Unfortunately HOCON doesn't support relative paths and
# I don't know the common prefix.



testkit {
  # Set this high otherwise tests fail when debugging
  asyncTimeout = 50 minutes
  testDBs = [oracle11g,sqlserver2008,db2,db2NoTableSpace,oracle11gNoTableSpace]
}

db2 {
  enabled = true
  baseURL = "jdbc:db2://"${host}":50000/DSNFREE"
  user = db2inst1
  password = db2inst1-pwd
  testDB = ""
  admindb = ""
  adminConn {
    user = ${user}
    password = ${password}
    tableTableSpace = "FREESLICK_DATA"
    indexTableSpace = "FREESLICK_INDEX"
  }
  create = [
      """
      begin
        declare tsCount int default 0;
        select count(*) into tsCount from SYSIBMADM."USER_TABLESPACES" where tablespace_name = '"""${adminConn.tableTableSpace}"""';
        if (tsCount = 0) then
          execute immediate 'create tablespace """${adminConn.tableTableSpace}""" managed by database using (file ''./dbdata/"""${adminConn.tableTableSpace}""".dat'' 10M)';
          execute immediate 'create tablespace """${adminConn.indexTableSpace}""" managed by database using (file ''./dbdata/"""${adminConn.indexTableSpace}""".dat'' 10M)';
        end if;
        for v_row as (select 'drop table "' || table_schema || '"."' || table_name || '"' as NAME from sysibm.tables where table_schema = 'DB2INST1')
        do
         execute immediate v_row.NAME;
        end for;
        for v_seq as (select 'drop sequence "' || seqname || '"' as NAME from syscat.sequences where seqschema = 'DB2INST1')
        do
         execute immediate v_seq.NAME;
        end for;
      end"""
    ]
  driver = com.ibm.db2.jcc.DB2Driver
}

db2NoTableSpace {
  enabled = true
  baseURL = "jdbc:db2://"${host}":50000/DSNFREE"
  user = db2inst1
  password = db2inst1-pwd
  testDB = ""
  admindb = ""
  create = [
      """
      begin
        for v_row as (select 'drop table "' || table_schema || '"."' || table_name || '"' as NAME from sysibm.tables where table_schema = 'DB2INST1')
        do
         execute immediate v_row.NAME;
        end for;
        for v_seq as (select 'drop sequence "' || seqname || '"' as NAME from syscat.sequences where seqschema = 'DB2INST1')
        do
         execute immediate v_seq.NAME;
        end for;
      end"""
    ]
  driver = com.ibm.db2.jcc.DB2Driver
}

sqlserver2008 {
  enabled = true
  baseURL = "jdbc:jtds:sqlserver://"${host}":2008/"
  user = sa
  password = FreeSlick
  testDB = freeslicktest
  admindb = freeslicktest
  testConn {
    keepAliveConnection=true
  }
  create = [
    if db_id('freeslicktest') is null create database freeslicktest
    use freeslicktest
    exec sp_MSforeachtable """"declare @name nvarchar(max); set @name = parsename('?', 1); exec sp_MSdropconstraints @name""""
    "exec sp_MSforeachtable 'drop table ?'"

    ]
  driver = net.sourceforge.jtds.jdbc.Driver
}

oracle11g {
  enabled = true
  baseURL = "jdbc:oracle:thin:@//"${host}":49161/xe"
  testDB = ""
  admindb = ""
  adminConn {
    user = system
    password = oracle
    tableTableSpace = "freeslick_data"
    indexTableSpace = "freeslick_index"
  }
  testConn {
    user = FREESLICKTEST
    password = ${testConn.user}
    keepAliveConnection=true
    connectionPool=HikariCP
    connectionTimeout=20000
  }
  create = [
    """declare
      userCount integer := 0;
    begin
      select count(*) into userCount from dba_users where username = '"""${testConn.user}"""';
      if (userCount = 0)
      then
        execute immediate ('create tablespace """${adminConn.tableTableSpace}""" datafile ''"""${adminConn.tableTableSpace}""".dat'' size 10M autoextend on');
        execute immediate ('create tablespace """${adminConn.indexTableSpace}""" datafile ''"""${adminConn.indexTableSpace}""".dat'' size 10M autoextend on');
        execute immediate ('create user """${testConn.user}""" identified by """${testConn.user}""" DEFAULT TABLESPACE """${adminConn.tableTableSpace}""" TEMPORARY TABLESPACE temp QUOTA UNLIMITED ON """${adminConn.tableTableSpace}"""');
        execute immediate ('grant all privileges to """${testConn.user}"""');
      else
        FOR r1 IN ( SELECT 'DROP ' || object_type || ' """${testConn.user}"""."' || object_name || '"' || DECODE ( object_type, 'TABLE', ' CASCADE CONSTRAINTS PURGE' ) AS v_sql
                    FROM dba_objects
                    WHERE object_type IN ( 'TABLE', 'SEQUENCE' )
                    and owner = '"""${testConn.user}"""'
                    ORDER BY object_type, object_name ) LOOP
           EXECUTE IMMEDIATE r1.v_sql;
        END LOOP;
      end if;
    end;"""
  ]
  driver = oracle.jdbc.OracleDriver
}

oracle11gNoTableSpace {
  enabled = true
  baseURL = "jdbc:oracle:thin:@//"${host}":49161/xe"
  testDB = ""
  admindb = ""
  adminConn {
    user = system
    password = oracle
  }
  testConn {
    user = FREESLICKTEST
    password = ${testConn.user}
    keepAliveConnection=true
    connectionPool=HikariCP
    connectionTimeout=20000
  }
  create = [
    """declare
      userCount integer := 0;
    begin
      FOR r1 IN ( SELECT 'DROP ' || object_type || ' """${testConn.user}"""."' || object_name || '"' || DECODE ( object_type, 'TABLE', ' CASCADE CONSTRAINTS PURGE' ) AS v_sql
                  FROM dba_objects
                  WHERE object_type IN ( 'TABLE', 'SEQUENCE' )
                  and owner = '"""${testConn.user}"""'
                  ORDER BY object_type, object_name ) LOOP
         EXECUTE IMMEDIATE r1.v_sql;
      END LOOP;
    end;"""
  ]
  driver = oracle.jdbc.OracleDriver
}
